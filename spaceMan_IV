namespace game
{
    internal class Program
    {
    /*    Invaders from outer space have arrived and are abducting 
    *  humans using tractor beams. Players must crack the codeword 
    *  to stop the abduction. On the 6th accumulated miss the game
    *  ends with a loss and the choice is given to start a new game.
    *
    *     Also the player can exit any time via pressing Control+C.
    *  The text colors are selected to work best with the display
    *  having its colors inverted via system settings. Flags have
    *  been set up to make sure colors revert to original settings when
    *  a player enters Control+C.  */

        public static bool isExiting = false;

        static void Main(string[] args)
        {
            Console.CancelKeyPress += new ConsoleCancelEventHandler(OnExit);

            Console.BackgroundColor = ConsoleColor.White;
            Console.Clear();

            Console.WriteLine("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
            Game.Intro();

            bool keepAlive;
            do
            {
                Random rand = new();
                Game g = new(rand.Next(1095));

                while (!g.DidWin() && !g.DidLose())
                {
                    if (isExiting)
                        return;
                    g.Display();
                    g.Start();
                }

                if (isExiting)
                     return;

                g.Display();

            exit:

                Console.ForegroundColor = ConsoleColor.DarkBlue;
                Console.Write(" PLAY AGAIN? (y/n): ");

                Console.ForegroundColor = ConsoleColor.DarkRed;
                string answer = Console.ReadLine() ?? "possible null assignment";

                if (!string.IsNullOrEmpty(answer))
                {
                    answer = answer.ToLower();

                    if (answer == "n")
                    {
                        keepAlive = false;
                    }
                    else if (answer == "y")
                    {
                        keepAlive = true;
                    }
                    else
                    {
                        if (isExiting)
                            return;
                        g.Display();
                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                        Console.Write(" need Y or N |");
                        goto exit;
                    }
                }
                else
                {
                    if (isExiting)
                        return;
                    g.Display();
                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                    Console.Write(" NEED y OR n |");
                    goto exit;
                }
            } while (keepAlive);

            Console.ResetColor();
        //    Console.Clear();
            Console.WriteLine("Exiting normally...");
        }

        protected static void OnExit(object? sender, ConsoleCancelEventArgs k)
        {
            isExiting = true;
    //        k.Cancel = true;
            Console.ResetColor();
    //        Console.Clear();
            Console.WriteLine("Force-exiting...");
            Environment.Exit(0);
        }
    }

    internal class Game
    {
        public UFO alienCraft = new UFO();

        private readonly string symbolsNumbersAndSpace = "`~!@#$%^&*()-_=+,.<>/?;:'\"[]{}\\| 0123456789";
        private readonly string alphasNumbersAndSpace = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz 0123456789";
        private readonly string symbolsAndNumbers = "`~!@#$%^&*()-_=+,.<>/?;:'\"[]{}\\|0123456789";
        private readonly string symbolsAndSpace = "`~!@#$%^&*()-_=+,.< >/?;:'\"[]{}\\|";
        private readonly string symbols = "`~!@#$%^&*()-_=+,.<>/?;:'\"[]{}\\|";
        private readonly string alphas = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
        private readonly string numbers = "0123456789";
        private readonly string[] codewordOptions =
        {
            "apocalypse", "scream", "tiger", "millennial", "espionage", "extravagant",
            "apathy", "generous", "rose", "fascination", "revolution", "artificial",
            "strife", "discrepancy", "ordinary", "rage", "devotion", "imagination",
            "delirious", "excruciating", "grateful", "capacity", "marathon", "volcano",
            "trend", "domination", "dramatic", "peaceful", "organic", "page", "hope",
            "duck", "pope", "rope", "graceful", "divine", "elementary", "basic", "genius",
            "iconic", "reservation", "planetary", "momentary", "sacrament", "viral",
            "lame", "game", "digress", "duress", "instinct", "devolution", "panic", "pain",
            "gain", "strain", "domain", "remain", "cage", "rock", "luck", "train", "drain",
            "trash", "stash", "smash", "dose", "pose", "lose", "hose", "most", "dock",
            "amphibian", "stream", "resilient", "egregious", "fragrance", "romance", "face",
            "observe", "deserve", "obscure", "tape", "extreme", "rain", "grape", "cape",
            "dart", "cart", "fair", "rude", "nice", "cruel", "love", "fade", "fast", "cast",
            "past", "last", "pass", "mass", "fake", "rake", "lake", "rows", "toes", "foes",
            "fog", "dog", "log", "hog", "lazy", "hazy", "ironic", "moronic", "magic", "sky",
            "logic", "logos", "foggy", "fun", "pun", "fur", "gun", "run", "rug", "tug",
            "life", "stress", "mess", "mind", "find", "freak", "leak", "race", "lace", "fax",
            "fact", "pact", "gaze", "maze", "lean", "cream", "dream", "steam", "information",
            "cry", "shy", "try", "why", "toys", "boy", "goat", "way", "mean", "fry", "tale",
            "spider", "emotion", "intense", "danger", "defense", "offense", "stranger",
            "ranger", "static", "stain", "stormy", "polite", "police", "glare", "delegation",
            "stage", "bubonic", "crate", "cake", "case", "pace", "late", "fate", "mash",
            "date", "night", "gate", "mate", "cat", "rat", "fat", "mat", "map", "rest",
            "pest", "nest", "best", "test", "pear", "tear", "gear", "fear", "near", "rear",
            "dear", "beer", "bean", "bash", "star", "stay", "day", "ray", "cringe", "fringe",
            "prince", "quince", "robot", "cobra", "snake", "stake", "stand", "grand",
            "brand", "land", "band", "bear", "rare", "dare", "war", "wild", "waste", "taste",
            "paste", "grave", "wax", "boat", "water", "rated", "year", "cash", "crash",
            "fox", "box", "mop", "man", "tan", "fan", "gin", "girl", "live", "dive", "sting",
            "smear", "ride", "trade", "maid", "hide", "fellow", "glide", "fountain", "steer",
            "mountain", "money", "honey", "mad", "fad", "glad", "sad", "bad", "lad", "bid",
            "bin", "bat", "hat", "win", "wit", "bit", "sit", "lit", "hit", "chance", "legit",
            "glance", "lord", "word", "loan", "wand", "sand", "wait", "slope", "hate", "fly",
            "roar", "beat", "feet",  "heat", "neat", "seat", "follow", "need", "seed",
            "mellow", "beet", "deer", "bent", "rent", "tent", "went", "instigate", "lizard",
            "feed", "weep", "when", "treat", "seal", "hollow", "cheat", "device", "stance",
            "mice", "mug", "house", "ram", "jam", "rice", "dice", "regress", "impress",
            "repress", "brain", "grain", "splash", "main", "rap", "gut", "hut", "nap", "hug",
            "bug", "sage", "mage", "wizard", "mouse", "say", "may", "hay", "fantastic",
            "bombastic", "drape", "propagation", "desecration", "superstition", "fungus",
            "emancipation", "obfuscate", "denigrate", "fame", "dame", "lam", "ham", "join",
            "coin", "meme", "vain", "vase", "baby", "wary", "many", "dent", "send", "farm",
            "harm", "warm", "cold", "fold", "bold", "sold", "mold", "moan", "foam", "drone",
            "long", "gong", "bong", "bone", "lone", "wall", "pearl", "base", "leap", "leaf",
            "blow", "flow", "glow", "slow", "slot", "hot", "bot", "got", "not", "lot", "mic",
            "prank", "frank", "crank", "lice", "pic", "trick", "lungs", "humus", "rip",
            "nip", "sip", "lip", "reformation", "restitution", "infiltrate", "oration",
            "illustrate", "erosion", "negation", "nut", "rot", "sun", "sin", "son", "bow",
            "moon", "soon", "loon", "foot", "loop", "goon", "swirl", "swift", "stiff", "dip",
            "lock", "mock", "suck", "buck", "funk", "sunk", "rank", "bank", "trans", "sniff",
            "phone", "stone", "tall", "hall", "gall", "ball", "balm", "palm", "fixation",
            "rotation", "clash", "brash", "sports", "shorts", "monument", "document", "line",
            "passion", "regiment", "sentient", "cow", "west", "loin", "steep", "deep", "now",
            "reef", "beef", "low", "sow", "how", "tow", "row", "elation", "mansion", "lay",
            "pension", "meek", "spank", "thick", "tone", "zone", "lime", "like", "sight",
            "light", "fight", "might", "right", "strength", "hold", "gold", "flat", "pale",
            "seek", "reek", "seen", "weed", "geek", "leek", "work", "warp", "wane", "mile",
            "tension", "nose", "vow", "fit", "slang", "rust", "dust", "must", "lust", "bust",
            "trunk", "trump", "trust", "truck", "leverage", "beverage", "book", "hook",
            "rook", "took", "look", "nook", "gook", "cook", "lend", "bend", "tend", "mend",
            "lens", "zen", "hen", "den", "dot", "yen", "cost", "lost", "host", "deal",
            "feel", "reel", "stuck", "steel", "will", "wheel", "whiff", "flash", "formal",
            "knife", "white", "black", "crack", "stack", "smack", "shack", "slack", "sale",
            "harsh", "marsh", "first", "burst", "nurse", "curse", "purse", "feral", "hail",
            "normal", "nordic", "gnostic", "crane", "radiation", "humiliation", "slave",
            "trace", "blaze", "flame", "crave", "grade", "grass", "brass", "brave", "fuck",
            "mine", "mike", "mist", "gist", "list", "food", "mood", "hood", "good", "doom",
            "root", "loot", "loom", "zoom", "hoot", "boot", "boom", "bowl", "howl", "soul",
            "amazon", "just", "avalon", "rate", "bait", "reed", "space", "teen", "kill",
            "fill", "bill", "mill", "hill", "nail", "rail", "wail", "sail", "bail", "dean",
            "deaf", "quit", "spit", "slit", "slip", "slap", "keen", "peek", "peak", "sick",
            "wick", "lick", "beak", "queen", "queer", "seem", "seam", "zest", "part", "mart",
            "hard", "pot", "cot", "spear", "shear", "swear", "surge", "purge", "merge",
            "forge", "heal", "smart", "spring", "farce", "large", "lair", "liar", "tail",
            "gait", "fire", "wire", "pire", "tire", "tier", "least", "beast", "lease",
            "feast", "east", "next", "peel", "real", "pill", "verge", "blame", "blast",
            "bloom", "groom", "shirt", "flirt", "sneer", "clear", "sheer", "swim", "sweep",
            "suit", "pool", "tool", "gust", "swing", "blare", "blade", "clean", "slide",
            "pride", "tribe", "pipe", "pine", "pint", "wine", "dine", "fine", "hint", "hind",
            "side", "wind", "dire", "high", "nigh", "sigh", "tint", "drop", "crop", "stop",
            "flop", "crow", "grow", "spot", "shot", "prop", "coat", "goal", "grip", "flip",
            "ship", "ruin", "skip", "drip", "neon", "lion", "crime", "spine", "shine", "pry",
            "swine", "slime", "poor", "gone", "done", "lane", "bane", "cane", "mane", "pane",
            "door", "sane", "pick", "sock", "hock", "node", "code", "load", "road", "toad",
            "soap", "soar", "soak", "soil", "boil", "coil", "jail", "pail", "toil", "foil",
            "toll", "mall", "fall", "call", "doll", "told", "wood", "wool", "fool", "cool",
            "sway", "pray", "flay", "shape", "vape", "gape", "slay", "tray", "play", "clay",
            "fest", "jest", "less", "crest", "press", "dress", "quest", "guest", "chess",
            "seer", "week", "force", "peal", "weal", "monk", "dunk", "junk", "fist", "milk",
            "silk", "folk", "talk", "walk", "speed", "green", "fleet", "greet", "dry",
            "tank", "mink", "link", "wink", "pike", "hike", "bike", "wide", "pile", "more",
            "manipulation", "resuscitation", "proclamation", "decapitation", "excavation",
            "define", "design", "resign", "malign", "benign", "demonstration", "smirk",
            "strangulation", "electrocution", "dismembering", "distinguished", "bore", "go",
            "lore", "gore", "fork", "dork", "tork", "pork", "sort", "store", "shore", "for",
            "whore", "score", "scope", "clone", "cone", "distorted", "hole", "pole", "sole",
            "fowl", "to", "at", "is", "haste", "by", "in", "flack", "whack", "flank", "fare",
            "care", "pair", "hair", "sheet", "sweet", "sheen", "breed", "flask", "task",
            "dye", "bye", "be", "sheep", "creep", "street", "respiration", "destination",
            "lie", "die", "leave", "leash", "learn", "steal", "mire", "spin", "do", "doe",
            "kite", "bite", "rite", "mite", "site", "file", "nile", "illumination",
            "degradation", "suffocatin", "repetition", "apparition", "sensation", "relation",
            "frustration", "proficient", "sufficient", "cult", "bolt", "salt", "malt",
            "halt", "pub", "bud", "mud", "put", "but", "cut", "same", "tame", "give", "jolt",
            "shock", "stock", "block", "reveal", "appeal", "surreal", "unreal", "dwell",
            "swell", "smell", "shell", "quell", "spell", "built", "quilt", "guilt", "stilt",
            "type", "no", "yes", "pay", "oh", "hey", "stall", "stamp", "cramp", "tramp",
            "raid", "made", "stale", "floor", "spark", "spunk", "cope", "chunk", "brink",
            "solid", "fluid", "flush", "crush", "rash", "hash", "lash", "dash", "phase",
            "phrase", "please", "ease", "disease", "obese", "cease", "peace", "crease",
            "grease", "tease", "wheeze", "sneeze", "serpent", "service", "certain", "cheese",
            "curtain", "fleece", "freeze", "so", "get", "it", "on", "up", "and", "my", "the",
            "beach", "peach", "bleach", "reach", "teach", "each", "leech", "energy", "sly",
            "entity", "destiny", "enemy", "elevate", "celebrate", "generate", "void", "envy",
            "envoy", "employ", "enjoy", "deploy", "decoy", "devoid", "stride", "strive",
            "string", "bring", "drink", "destroy", "shrink", "stripe", "strip", "snack",
            "snow", "snap", "snare", "stare", "stairs", "chair", "determination", "bionic",
            "toxic", "tonic", "sonic", "androgynous", "homogenous", "superfluous", "animal",
            "contamination", "strenuous", "vigorous", "enormous", "efficacious", "practical",
            "radical", "rational", "logical", "dogmatic", "fanatical", "superficial",
            "extraordinary", "repetitious", "sacriligious", "superstitious", "indignation",
            "concoction", "altercation", "computation", "substitution", "subterranean",
            "desperation", "obliterate", "recuperate", "enumerate", "revelation", "nation",
            "potion", "lotion", "motion", "bet", "knit", "red", "led", "wet", "set", "form", 
			"norm"
        };

        public Game(int x)
        {
            this.MaxNumberOfGuesses = 6;
            this.CurrentWrongGuesses = 0;
            this.CurrentRightGuesses = 0;

            this.Codeword = codewordOptions[x];
            int y = (this.Codeword.Length * 2) - 1;
            char[] emptyWordWithSpaces = new char[y];

            for (int z = 0; z < y; z++)
            {
                if (z % 2 == 0)
                    emptyWordWithSpaces[z] = '_';
                else
                    emptyWordWithSpaces[z] = ' ';
            }

            this.CurrentWord = new string(emptyWordWithSpaces);
            this.CodewordAsArray = new char[this.CurrentWord.Length];

            int superIndex = 0;
            for (int i = 0; i < this.CurrentWord.Length; i++)
            {
                if (i % 2 == 0)
                {
                    this.CodewordAsArray[i] = this.Codeword[superIndex];
                    ++superIndex;
                }
                else
                {
                    this.CodewordAsArray[i] = ' ';
                }
            }
            this.CodewordWithSpaces = new string(this.CodewordAsArray);

            this.InputAsChar = ' ';
            this.ErrorAsString = string.Empty;
            this.LttrsAlreadyUsed = [];

            this.WasWrong = false;
            this.ThereWasAnError = false;
            this.ItWasHitOrMiss = false;
        }
        public int MaxNumberOfGuesses { get; private set; }
        public int CurrentWrongGuesses { get; private set; }
        public int CurrentRightGuesses { get; private set; }
        public char InputAsChar { get; set; }
        public string Codeword { get; }
        public string CurrentWord { get; private set; }
        public string CodewordWithSpaces { get; }
        public string ErrorAsString { get; set; }
        public char[] CodewordAsArray { get; }
        public List<char> LttrsAlreadyUsed { get; set; }
        public bool WasWrong { get; set; }
        public bool ThereWasAnError { get; set; }
        public bool ItWasHitOrMiss { get; set; }

        public static void Intro()
        {
            Console.ForegroundColor = ConsoleColor.DarkCyan;
            Console.WriteLine("            CRACK the CODEWORD");
            Console.WriteLine("          and STOP the ABDUCTION!");
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine("             ~~~*~~*~~*~~*~~~");
            Console.ForegroundColor = ConsoleColor.DarkMagenta;
            Console.WriteLine("    maximize panel to display images->");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("      set color filters to inverted->");
            Console.ForegroundColor = ConsoleColor.DarkBlue;
            Console.Write("  press Ctrl+C to exit|<Enter> to start=>");
            Console.ForegroundColor = ConsoleColor.DarkRed;
            Console.ReadLine();
        }

        public void Inform()
        {
            Console.ForegroundColor = ConsoleColor.Green;

            if (DidLose())
                Console.WriteLine("       ~~*~*~  STUFF HAPPENS! ~*~*~~");
            else if (DidWin())
                Console.WriteLine("\n         ~~*~*~  RUN HOME!  ~*~*~~");
            else if (WasWrong && CurrentWrongGuesses > 0)
                Console.WriteLine("      ~~*~*~  SWING & A MISS!  ~*~*~~");
            else if (!WasWrong && CurrentRightGuesses > 0)
                Console.WriteLine("         ~~*~*~  BASE HIT!  ~*~*~~");
            else
                Console.WriteLine("          ~~*~*~ BATTER UP! ~*~*~~");
        }

        public void Display()
        {
            // necessary so color won't change on forced exit--don't know how to prevent
            // this from running when you do a Control-C
            if (Program.isExiting)
            {
 //               Console.WriteLine("Exiting forcibly...");
                return;
            }
            else
            {
                Console.WriteLine("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                if (Program.isExiting) return;
                Console.WriteLine("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                if (Program.isExiting) return;
                Console.WriteLine("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                if (Program.isExiting) return;
                Console.WriteLine("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                if (Program.isExiting) return;

                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine("   //=================================\\\\");

                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.WriteLine(alienCraft.Showcase());

                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine("   \\\\=================================//\n");

                Inform();

                Console.ForegroundColor = ConsoleColor.DarkBlue;
                if (!DidWin() && !DidLose())
                {
                    int guessesRemaining = MaxNumberOfGuesses - CurrentWrongGuesses;
                    if (ThereWasAnError)
                    {
                        Console.WriteLine(ErrorAsString);
                        ThereWasAnError = false;
                    }
                    else
                    {
                        switch (guessesRemaining)
                        {
                            case 1:
                                Console.WriteLine("   ~~*~ game ends if you get a miss ~*~~");
                                break;
                            case 2:
                                Console.WriteLine("     ~~*~ you can get 1 more miss ~*~~");
                                break;
                            case 6:
                                if (CurrentRightGuesses == 0)
                                    Console.WriteLine("   ~~*~  you can get up to 5 misses ~*~~");
                                else
                                    Console.WriteLine("   ~~*~  you can still get 5 misses ~*~~");

                                break;
                            default:
                                Console.WriteLine("    ~~*~ you can get "
                                            + (guessesRemaining - 1) + " more misses ~*~~");
                                break;
                        }
                    }

                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.Write("     codeword: ");
                    Console.ForegroundColor = ConsoleColor.Black;
                    Console.WriteLine(CurrentWord);
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.Write("     HIT");
                    Console.Write("|");
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                    Console.Write("miss");
                    Console.Write(": ");

                    var ordered = LttrsAlreadyUsed.OrderBy(l => l);

                    foreach (char k in ordered)
                    {
                        if (CurrentWord.Contains(k))
                        {
                            Console.ForegroundColor = ConsoleColor.Cyan;
                            Console.Write(Convert.ToString(k).ToUpper() + " ");
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                            Console.Write(k + " ");
                        }
                    }

                    Console.WriteLine();
                }
                else if (!DidWin())
                {
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.Write("\n the codeword was: ");
                    Console.ForegroundColor = ConsoleColor.DarkMagenta;
                    Console.WriteLine(Codeword + "\n");
                }
                else
                {
                    Console.WriteLine("\n");
                }
            }
        }

        public void AssignValues(out IEnumerable<char> c1, out IEnumerable<char> c2,
            out IEnumerable<char> c3, out IEnumerable<char> c4, out IEnumerable<char> c5,
            out IEnumerable<char> c6, out IEnumerable<char> c7, string s)
        {
            c1 = s.Where(a => symbolsNumbersAndSpace.Contains(a));
            c2 = s.Where(b => symbolsAndNumbers.Contains(b));
            c3 = s.Where(c => alphas.Contains(c));
            c4 = s.Where(d => numbers.Contains(d));
            c5 = s.Where(e => symbols.Contains(e));
            c6 = s.Where(f => symbolsAndSpace.Contains(f));
            c7 = s.Where(g => alphasNumbersAndSpace.Contains(g));
        }

        public void Start()
        {
            if (!Program.isExiting)
            {
            beginning:

                if (ItWasHitOrMiss)
                {
                    if (Program.isExiting) return;
//                        goto end;
                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                    Console.Write("  try another: ");
                    ItWasHitOrMiss = false;
                }
                else
                {
                    if (Program.isExiting) return;
//                        goto end;
                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                    Console.Write(" try a letter: ");
                }

                Console.ForegroundColor = ConsoleColor.DarkRed;

                string input = Console.ReadLine() ?? "possible null assignment";

                IEnumerable<char> symNumSpa, symNum, alph, numb, symb, symSpa, alpNumSpa;
                AssignValues(out symNumSpa, out symNum, out alph, out numb, out symb, out symSpa, out alpNumSpa, input);

                if (!String.IsNullOrEmpty(input))
                {
                    bool isANumber = int.TryParse(input, out _);

                    if (isANumber)
                    {
                        if (!symSpa.Any())
                            ErrorAsString = "        ~~*~ ERROR: no numbers ~*~~";
                        else
                            ErrorAsString = "   ~~*~ ERROR: no spaces & numbers  ~*~~";

                        ThereWasAnError = true;
                        Display();
                        goto beginning;
                    }
                    else if (symNumSpa.Any())
                    {
                        if (!symNum.Any() && !alph.Any())
                            ErrorAsString = "        ~~*~ ERROR: no spaces  ~*~~";
                        else if (!alpNumSpa.Any())
                            ErrorAsString = "        ~~*~ ERROR: no symbols ~*~~";
                        else if (!alph.Any() && !numb.Any())
                            ErrorAsString = "   ~~*~ ERROR: no spaces & symbols  ~*~~";
                        else if (alph.Any())
                            if (!symb.Any() && !numb.Any())
                                ErrorAsString = "     ~~*~ ERROR: no extra spaces  ~*~~";
                            else if (numb.Any())
                                ErrorAsString = "     ~~*~ ERROR: no extra numbers ~*~~";
                            else
                                ErrorAsString = "     ~~*~ ERROR: no extra symbols ~*~~";
                        else
                            ErrorAsString = "   ~~*~ ERROR: no numbers & symbols ~*~~";

                        ThereWasAnError = true;
                        Display();
                        goto beginning;
                    }
                    else if (input.Length != 1)
                    {
                        ErrorAsString = "    ~~*~ ERROR: more than 1 letter ~*~~";
                        ThereWasAnError = true;
                        Display();
                        goto beginning;
                    }
                    else
                    {
                        if (input == input.ToUpper())
                            input = input.ToLower();

                        if (WasARepeat(input))
                            goto beginning;
                        else if (Codeword.Contains(input))
                            UpdateCurrentWord();
                        else
                            NextBadScene();

                        ItWasHitOrMiss = true;
                    }
                }
                else
                {
                    ErrorAsString = "   ~~*~ ERROR: nothing was entered  ~*~~";
                    ThereWasAnError = true;
                    Display();
                    goto beginning;
                }
            }
            else
            {
                Console.WriteLine("Exiting by force...");
            }
        // end:     <--- this was used during the debugging phase...
        //     {
        //         Console.WriteLine("Exiting by extreme force...");
        //     }
        }

        public void UpdateCurrentWord()
        {
            WasWrong = false;
            CurrentRightGuesses++;
            char[] newTry = CurrentWord.ToCharArray();

            for (int idx = 0; idx < CurrentWord.Length; idx++)
            {
                if (CodewordAsArray[idx] == InputAsChar)
                    newTry[idx] = InputAsChar;
            }

            LttrsAlreadyUsed.Add(InputAsChar);
            CurrentWord = new string(newTry);
            if (DidWin())
                alienCraft.SetFinal();
        }

        public void NextBadScene()
        {
            WasWrong = true;
            CurrentWrongGuesses++;
            LttrsAlreadyUsed.Add(InputAsChar);
            alienCraft.AddPart();
        }

        public bool WasARepeat(string x)
        {
            InputAsChar = Convert.ToChar(x);

            if (LttrsAlreadyUsed.Contains(InputAsChar))
            {
                ErrorAsString = "      ~~*~ ERROR: already in use  ~*~";
                ThereWasAnError = true;
                Display();
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool DidLose() => (CurrentWrongGuesses == MaxNumberOfGuesses);
        public bool DidWin() => (CurrentWord == CodewordWithSpaces);
    }

    internal class UFO
    {
        private readonly string s0 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          |       |                /
   /                                   \
   \          |   O   | __,---------.  /
   /            --|--    (" + 
               " \u00A1ay\u00FAdame! ) \\\n" +
    @"   \          |   |   |   `---------'  /
   /           __/_\__                 \";

        private readonly string s1 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          |       |                /
   /              O     __,---------.  \
   \          | --|-- |  (" +
                     " \u00A1cojones! ) /\n" +
    @"   /              |       `---------'  \
   \          |  / \  |                /
   /                                   \";

        private readonly string s2 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          |   O   |    ,------.    /
   /            --|-- \___/" +
               "\u00A1ap\u00FArate\\   \\\n" +
@"   \          |   |   |   \ boludo!/   /
   /             / \       `------'    \
   \          |       |                /
   /                                   \";

        private readonly string s3 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          | --|-- |    ,------.    /
   /              |   \___/" +
               "\u00A1pinche \\   \\\n" +
    @"   \          |  / \  |   \incapaz!/   /
   /                       `------'    \
   \          |       |                /
   /                                   \";

        private readonly string s4 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          |   |   |    ,-------.   /
   /             / \  \___/" +
               "\u00A1pi\u00E9nsala\\  \\\n" +
    "   \\          |       |   \\ carajo! /  /\n" +
    @"   /                       `-------'   \
   \          |       |                /
   /                                   \";

        private readonly string s5 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o9o0o o0o9o0o o0o9o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \          |  / \  |   ,---------.  /
   /                  \__/" +
                   "\u00A1gilipollas\\ \\\n" +
    @"   \          |       |  \ de mierda!/ /
   /                      `---------'  \
   \          |       |                /
   /                                   \";

        private readonly string s6 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._.O._.\  _______       /
   /     .--""-'-""-'-""-'-""--.    \      \
   \  <( o9o0o o0o9o0o o0o9o )>  \     /
   /     `'-.,_,_,_,_,_,.-'`      \    \
   \                    ,----------^.  /
   /                   /" +
                " \u00A1la  concha \\ \\\n" +
    @"   \                   \ de la loria!/ /
   /                    `-----------'  \
   \                                   /
   /                                   \";

        private readonly string s7 =
    @"   \                                   /
   /           .-'""'-.                 \
   \          /._._._.\                /
   /     .--""-'-""-'-""-'-""--.           \
   \  <( o6o0o o0o6o0o o0o6o )>        /
   /     `'-.,_,_,_,_,_,.-'`           \
   \                                   /
   /                                   \
   \                          _ O      /
   /                         / |\_     \
   \                           |       /
   /                        __/_\__    \";

        private readonly string[] ufos;
        private int stage;

        public UFO() => ufos = [s0, s1, s2, s3, s4, s5, s6, s7];

        public void AddPart()
        {
            stage++;

            if (stage >= ufos.Length)
            {
                Console.WriteLine("staging error");
                stage = ufos.Length - 1;
                Console.ReadKey();
            }
        }

        public void SetFinal() => stage = ufos.Length - 1;
        public string Showcase() => ufos[stage];
        public override string ToString() => "I'm a UFO object...";
    }
}
