using System;

namespace HomePetProject
{
    class Program
    {
        static void Main(string[] args)
        {
            HashSet<int> validChoices = [1, 2, 3, 4, 5];
            HashSet<string> alphabeticAnswers = ["one", "two", "three", "four", "five"];

            int index = 0;
            int maxPets = 30;

            const int PetID = 0;  // auto-generated like C1, D2, etc.
            const int Species = 1;  //  c  d
            const int Name = 2;  // string
            const int Age = 3;  // int in years or '?' for unknown
            const int Gender = 4;   //  b  g
            const int BreedType = 5;   //  p  h  u
            const int Size = 6;   //  s  m  l
            const int Weight = 7;  // float in pounds
            const int FurColor = 8;  // bk  wh  db  br  lb  gy rd  mx
            const int FurType = 9;  // sh  lh  cr  dk  sp  fl  nk  sf  wr  un
            const int EyeColor = 10;  // am  co  bk  db  br  lb  bl  gr  go  hz  hc  un
            const int Physique = 11;  // strings
            const int Behaviors = 12; // ex  fo  mo  ad  qu  st  im  re  se  in  na  ev  pr  bo  as  pa  ob
            const int ActivityLevel = 13;  // 1 to 5 , very mellow to hyperactive
            const int SociabilityLevel = 14;   // 1 to 5 , very reserved to very social
            const int CuriosityScale = 15;   // 1 to 5 , very cautious to highly curious
            const int AttachmentStyle = 16;  // de  sv  cf
            const int FeedingStyle = 17;  // ff  sc  pe  gb  sn  un

            string menuSelection;
            string[,] ourPets = new string[maxPets, 18]; // 18 fields per pet

            var codeToWord = new Dictionary<string, string>
                    {
                        { "b", "male" },
                        { "c", "cat" },
                        { "d", "dog" },
                        { "g", "female" },
                        { "h", "hybrid" },
                        { "l", "large" },
                        { "m", "medium" },
                        { "p", "purebred" },
                        { "s", "small" },
                        { "u", "unknown" },
                        { "ad", "adaptable" },
                        { "am", "amber" },
                        { "as", "assertive" },
                        { "bk", "black"},
                        { "bl", "blue" },
                        { "bo", "bold" },
                        { "br", "brown" },
                        { "cf", "aloof" },
                        { "co", "copper" },
                        { "cy", "curly" },
                        { "db", "dark brown" },
                        { "de", "loyal"},
                        { "dk", "double-coated" },
                        { "ev", "expressive" },
                        { "ex", "exploratory" },
                        { "ff", "free-fed" },
                        { "fo", "focused" },
                        { "fy", "fluffy" },
                        { "gb", "gobbler" },
                        { "gr", "green" },
                        { "go", "gold" },
                        { "gy", "gray" },
                        { "hc", "heterochromatic" },
                        { "hl", "hairless" },
                        { "hz", "hazel" },
                        { "im", "impulsive" },
                        { "in", "interactive" },
                        { "lb", "light brown" },
                        { "lh", "long-haired" },
                        { "mo", "motivated" },
                        { "mx", "combination" },
                        { "na", "non-aggressive" },
                        { "ob", "obedient" },
                        { "pa", "passive" },
                        { "pe", "picky eater"},
                        { "pr", "protective" },
                        { "qu", "quirky" },
                        { "rd", "red/rust" },
                        { "re", "reactive" },
                        { "se", "sensitive" },
                        { "sf", "scheduled" },
                        { "sh", "short-haired" },
                        { "sn", "slow nibbler" },
                        { "so", "soft" },
                        { "sp", "sparse" },
                        { "st", "spontaneous" },
                        { "sv", "choosy" },
                        { "un", "undefined" },
                        { "wh", "white" },
                        { "wy", "wiry" },
                    };

            string KeyToWord(string code)
            {
                return codeToWord.TryGetValue(code, out string? value) ? value : code;
            }

            string KeysToWords(string codes)
            {
                return string.Join(", ", codes.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                                              .Select(KeyToWord));
            }

            bool infoWasModified = false; // set a global flag for whether to display menu option 'S' or not

            string dataFile = "pets.txt"; // sample copy in 'sharedFiles'
            LoadPetsInfoFile(dataFile, ourPets);

            List<string> petIDs = [];

            for (int i = 0; i < maxPets; i++)
            {
                string? id = ourPets[i, PetID];
                if (HasData(id))
                {
                    petIDs.Add(id);
                }
            }

            do
            {
            // display the top-level menu options               
            OPTIONS_MENU:
                Console.Clear();
                Console.WriteLine("\x1b[95m     ***** Welcome to the 'Lost Pet Care Center' menu *****\x1b[0m");  // Bright Red

                if (infoWasModified)
                    Console.WriteLine("       \x1b[96m(WARNING: Info on file needs to be updated using option 'S')\x1b[0m");   // Bright Cyan
                else
                    Console.WriteLine("      \x1b[92m(NOTE: All of the current pet info has been updated)\x1b[0m");  // Bright Magenta
                Console.WriteLine(" 1. List all of our current pet records");
                Console.WriteLine(" 2. Add a pet record (*Note: Not Saved Automatically/use option 'S')");
                Console.WriteLine(" 3. Validate a pet's record's required info has been entered (*NSA)");
                Console.WriteLine(" 4. Modify/Update a pet's record (*NSA)");
                Console.WriteLine(" 5. Show pets of the same species that share a smiliar trait");

                if (infoWasModified)
                {
                    Console.WriteLine(" \x1b[91mS. Save/Update all of the current pet information\x1b[0m");
                    Console.Write("Enter an item number/letter from the menu or '0' to exit: ");
                }
                else
                {
                    Console.WriteLine("\x1b[91m---------------------------------------------------------\x1b[0m");
                    Console.Write("Enter an item number from the menu or '0' to exit: ");
                }

                string readResult = Console.ReadLine() ?? "";
                menuSelection = readResult?.Trim() ?? "";

                if (!HasData(menuSelection))
                {
                    PauseWithMessage("ERROR: Nothing was entered. Please try again.");
                }
                else if (menuSelection == "0")
                {
                    break;
                }
                else if ("s".Equals(menuSelection, StringComparison.OrdinalIgnoreCase))
                {
                    UpdateAllPetsSavedInfo(infoWasModified, maxPets, ourPets);
                    if (infoWasModified)
                        PauseWithMessage("Success: All the current pet information has been saved.");
                    infoWasModified = false;
                    goto OPTIONS_MENU;
                }
                else if (int.TryParse(menuSelection, out int y) && !validChoices.Contains(y))
                {
                    PauseWithMessage($"ERROR: {y} is not a valid option. Please try again.");
                }
                else if (int.TryParse(menuSelection, out int x) && validChoices.Contains(x))
                {
                    //        PauseWithMessage($"You selected menu option {x}.");

                    switch (x)
                    {
                        case 1:
                            {
                                // List all of our current pet information

                                //   optional: clear scrollback buffer-may not work in all terminals
                                //      Console.Write("\x1b[3J");

                                for (int i = 0; i < 44; i++)
                                    Console.WriteLine("");
                                Console.WriteLine("===== Current Pet Records =====");

                                int totalRecs = 0;
                                int completeRecs = 0;
                                int incompleteRecs = 0;

                                for (int i = 0; i < maxPets; i++)
                                {
                                    bool incompleteRecord = false;

                                    if (petIDs.Contains(ourPets[i, PetID]))
                                    {
                                        string thisPetID = ourPets[i, PetID]; // Get ID
                                        string[] fieldNames = ["Pet ID No.", "Species", "Name/Nickname", "Age", "Gender", "Breed Type", "Size", "Weight", "Fur Color", "Fur Type", "Eye Color", "Distinguishing Features", "Temperament/Demeanor", "Activity Level", "Sociability Level", "Curiosity Level", "Attachment Style", "Feeding Style"];

                                        if (!string.IsNullOrEmpty(thisPetID))
                                        {
                                            totalRecs++;
                                            Console.WriteLine($"\n  \x1b[95mRECORD #{i + 1}\x1b[0m");
                                            Console.WriteLine("--------------");

                                            for (int j = 0; j < 18; j++)
                                            {
                                                string thisField = ourPets[i, j];

                                                if (thisField == "tbd")
                                                {
                                                    incompleteRecord = true;
                                                    //continue;   // optional: use for not displaying 'tbd' fields
                                                }


                                                if (j == 0)
                                                {
                                                    // ID line
                                                    Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {thisField}");
                                                }
                                                else if (HasData(thisField))
                                                {
                                                    if (j == Species)
                                                    {
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {KeyToWord(thisField)}");
                                                    }
                                                    else if (thisField == "tbd")
                                                    {
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: (\x1b[31mNO DATA\x1b[0m)");
                                                    }
                                                    else if (j == Name || j == Age || j == Physique)
                                                    {
                                                        // these are freeform fields so just print as-is
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {thisField}");
                                                    }
                                                    else if (j == Weight)
                                                    {
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {thisField} lbs.");
                                                    }
                                                    else if (j == Behaviors || j == FurType)
                                                    {
                                                        string decodedLabel = KeysToWords(thisField);
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {decodedLabel}");
                                                    }
                                                    else if (j == ActivityLevel)
                                                    {
                                                        string activityLabel = thisField switch
                                                        {
                                                            "1" => "1 = zen master",
                                                            "2" => "2 = mostly calm",
                                                            "3" => "3 = moderate",
                                                            "4" => "4 = energetic",
                                                            "5" => "5 = hyperactive",
                                                            _ => "unknown"
                                                        };
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {activityLabel}");
                                                    }
                                                    else if (j == SociabilityLevel)
                                                    {
                                                        string socialLabel = thisField switch
                                                        {
                                                            "1" => "1 = very reserved",
                                                            "2" => "2 = reserved",
                                                            "3" => "3 = neutral",
                                                            "4" => "4 = social",
                                                            "5" => "5 = very social",
                                                            _ => "unknown"
                                                        };
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {socialLabel}");
                                                    }
                                                    else if (j == CuriosityScale)
                                                    {
                                                        string socialLabel = thisField switch
                                                        {
                                                            "1" => "1 = very cautious",
                                                            "2" => "2 = mildly curious",
                                                            "3" => "3 = neutral",
                                                            "4" => "4 = curious",
                                                            "5" => "5 = highly curious",
                                                            _ => "unknown"
                                                        };
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {socialLabel}");
                                                    }
                                                    else
                                                    {
                                                        // only thing left is the single code fields
                                                        string decodedLabel = KeyToWord(thisField);
                                                        Console.WriteLine($"\x1b[96m{fieldNames[j]}\x1b[0m: {decodedLabel}");
                                                    }
                                                }
                                            }

                                            if (incompleteRecord)
                                                incompleteRecs++;
                                            else
                                                completeRecs++;
                                        }
                                    }
                                }

                                Console.WriteLine($"\nEnd of query...there were {totalRecs} records total out of {maxPets} possible: {completeRecs} completed and {incompleteRecs} incomplete. \nNote: A '?' for 'age' is valid input and the record's completeness status isn't affected. \nMaximize terminal and/or scroll back as needed to view more records. ");
                                Console.Write("\nPress 'enter' to continue ...");
                                Console.ReadKey();
                                break;
                            }
                        case 2:
                            {
                                // Add a new pet friend to the family
                                string _petID, _speciesCode = "", _name = "", _age, _genderCode = "", _breedCategory = "", _sizeCode = "", _weight = "", _furColorCode = "", _furTypeCode = "", _eyeColorCode = "", _distinguishingFeatures = "", _temperamentalCodes = "", _activityLevel = "", _socialScore = "", _curiosityScale = "", _attachmentStyle = "", _feedingStyle = "";  // transient variables
                                string anotherPet = "y";
                                int petCount = 0;

                                for (int i = 0; i < maxPets; i++)
                                {
                                    if (HasData(ourPets[i, 0]))
                                        petCount++;
                                }

                                if (petCount >= maxPets)
                                {
                                    PauseWithMessage("We're currently at maximum capacity and regrettably cannot house \nany more pets at this time. Please check back soon.");
                                    goto END;
                                }

                                while (anotherPet == "y" && petCount < maxPets)
                                {
                                    bool validEntry = false;
                                    string? speciesResult;

                                    while (!validEntry)
                                    {
                                        Console.Clear();
                                        Console.Write("Type 'C' for cat or 'D' for dog to begin a new entry, or type '0' to cancel: ");
                                        speciesResult = Console.ReadLine();

                                        if (!HasData(speciesResult))
                                        {
                                            PauseWithMessage("ERROR: Nothing was entered. Please try again.");
                                            continue;
                                        }
                                        else
                                        {
                                            _speciesCode = speciesResult?.ToLower().Trim() ?? "";

                                            if (_speciesCode == "0")
                                            {
                                                goto END;
                                            }
                                            else if (_speciesCode != "d" && _speciesCode != "c")
                                            {
                                                PauseWithMessage($"ERROR: You must type 'C' or 'D' or the number '0' to abort.");
                                                validEntry = false;
                                            }
                                            else
                                            {
                                                validEntry = true;
                                            }
                                        }
                                    }

                                    _petID = string.Concat(_speciesCode.ToUpper(), (petCount + 1).ToString());
                                    petIDs.Add(_petID);

                                    string species = KeyToWord(_speciesCode);

                                    _name = PromptForField(BuildPrompt("name", species, "tbd"), "name");
                                    _age = PromptForAge(species, _name);
                                    _genderCode = PromptForField(BuildPrompt("gender", species, _name), "gender");
                                    _breedCategory = PromptForField(BuildPrompt("breed", species, _name), "breed");
                                    _sizeCode = PromptForField(BuildPrompt("size", species, _name), "size");
                                    _weight = PromptForWeight(species, _name);
                                    _furColorCode = PromptForField(BuildPrompt("fur", species, _name), "fur");
                                    _furTypeCode = PromptForField(BuildPrompt("coat", species, _name), "coat");
                                    _eyeColorCode = PromptForField(BuildPrompt("eyes", species, _name), "eyes");
                                    _distinguishingFeatures = PromptForField(BuildPrompt("marks", species, _name), "marks");
                                    _temperamentalCodes = PromptForField(BuildPrompt("behaviors", species, _name), "behaviors");
                                    _activityLevel = PromptForField(BuildPrompt("energy", species, _name), "energy");
                                    _socialScore = PromptForField(BuildPrompt("sociability", species, _name), "sociability");
                                    _curiosityScale = PromptForField(BuildPrompt("curiosity", species, _name), "curiosity");
                                    _attachmentStyle = PromptForField(BuildPrompt("attachment", species, _name), "attachment");
                                    _feedingStyle = PromptForField(BuildPrompt("feeding", species, _name), "feeding");

                                    if (!HasData(_name))
                                        _name = "tbd";
                                    if (!HasData(_genderCode))
                                        _genderCode = "tbd";
                                    if (!HasData(_breedCategory))
                                        _breedCategory = "tbd";
                                    if (!HasData(_sizeCode))
                                        _sizeCode = "tbd";
                                    if (!HasData(_weight))
                                        _weight = "tbd";
                                    if (!HasData(_furColorCode))
                                        _furColorCode = "tbd";
                                    if (!HasData(_furTypeCode))
                                        _furTypeCode = "tbd";
                                    if (!HasData(_eyeColorCode))
                                        _eyeColorCode = "tbd";
                                    if (!HasData(_distinguishingFeatures))
                                        _distinguishingFeatures = "tbd";
                                    if (!HasData(_temperamentalCodes))
                                        _temperamentalCodes = "tbd";
                                    if (!HasData(_activityLevel))
                                        _activityLevel = "tbd";
                                    if (!HasData(_socialScore))
                                        _socialScore = "tbd";
                                    if (!HasData(_curiosityScale))
                                        _curiosityScale = "tbd";
                                    if (!HasData(_attachmentStyle))
                                        _attachmentStyle = "tbd";
                                    if (!HasData(_feedingStyle))
                                        _feedingStyle = "tbd";

                                    ourPets[petCount, PetID] = _petID;
                                    ourPets[petCount, Species] = _speciesCode;
                                    ourPets[petCount, Name] = _name;
                                    ourPets[petCount, Age] = _age;
                                    ourPets[petCount, Gender] = _genderCode;
                                    ourPets[petCount, BreedType] = _breedCategory;
                                    ourPets[petCount, Size] = _sizeCode;
                                    ourPets[petCount, Weight] = _weight;
                                    ourPets[petCount, FurColor] = _furColorCode;
                                    ourPets[petCount, FurType] = _furTypeCode;
                                    ourPets[petCount, EyeColor] = _eyeColorCode;
                                    ourPets[petCount, Physique] = _distinguishingFeatures;
                                    ourPets[petCount, Behaviors] = _temperamentalCodes;
                                    ourPets[petCount, ActivityLevel] = _activityLevel;
                                    ourPets[petCount, SociabilityLevel] = _socialScore;
                                    ourPets[petCount, CuriosityScale] = _curiosityScale;
                                    ourPets[petCount, AttachmentStyle] = _attachmentStyle;
                                    ourPets[petCount, FeedingStyle] = _feedingStyle;
                                    


                                    petCount++;
                                    PauseWithMessage($"Success: Record {petCount} was added with pet-ID: {_petID}.");
                                    infoWasModified = true;

                                    if (petCount < maxPets)
                                    {
                                        Console.Clear();
                                        string message = $"We're presently managing {petCount} displaced pets in need of a caretaker. \nWe have space for {maxPets - petCount} more pet(s). \n\nWould you like to add one more? (y/n): ";
                                        anotherPet = PromptYesOrNo(message);
                                    }

                                    if (petCount >= maxPets)
                                        PauseWithMessage("We're sorry--we've reached maximum capacity and are unable to manage \nany more pets at this time. Pleae check back again soon.");
                                }
                            END:
                                break;
                            }
                        case 3:
                            {
                            // Ensure a pet's profile has required input
                            MENU:
                                bool validID = false;
                                string inputID = "";
                                string selection = "";

                                while (!validID)
                                {
                                    Console.Clear();
                                    Console.WriteLine("The following pet-IDs have been found in our system:");
                                    Console.Write("    ");

                                    //          List<string> petIDKeys = [.. petIDToIndex.Keys]; // raw IDs like "D4", "C3"

                                    for (int i = 0; i < petIDs.Count; i++)
                                    {
                                        if (i == petIDs.Count - 1)
                                        {
                                            Console.Write($"{i + 1}. {petIDs[i]}");
                                        }
                                        else
                                            Console.Write($"{i + 1}. {petIDs[i]} ,  ");
                                    }

                                    Console.Write("\n\nPlease enter an item number or '0' to cancel: ");
                                    selection = Console.ReadLine()?.Trim() ?? "";

                                    if (petIDs.Contains(selection.ToUpper()))
                                    {
                                        PauseWithMessage($"ERROR: You entered '{selection}'. Please enter the item number--not the pet-ID.");
                                    }
                                    else if (selection == "0")
                                    {
                                        // All the remaining code will be skipped and will return to the id menu.
                                        validID = true;
                                    }
                                    else if (int.TryParse(selection, out int idx) && idx > 0 && idx <= petIDs.Count)
                                    {
                                        index = idx - 1;
                                        inputID = petIDs[index];
                                        validID = true;
                                    }
                                    else if (!HasData(selection))
                                    {
                                        PauseWithMessage("ERROR: Nothing was entered. Please try again.");
                                    }
                                    else
                                    {
                                        PauseWithMessage($"ERROR: You entered '{selection}'. Try a digit like 1, 2, 3, etc.");
                                    }
                                }

                                if (selection != "0")
                                {
                                    //     int index = petIDToIndex[inputID];
                                    //     PauseWithMessage($"You entered '{inputID}' which is located at record {index + 1}.");

                                    List<string> fieldsThatBeganEmpty = [];
                                    bool ageWasUnknownAtStart = ourPets[index, Age] == "?";

                                    if (ourPets[index, Name] == "tbd")
                                        fieldsThatBeganEmpty.Add("name");
                                    if (ourPets[index, Gender] == "tbd")
                                        fieldsThatBeganEmpty.Add("gender");
                                    if (ourPets[index, BreedType] == "tbd")
                                        fieldsThatBeganEmpty.Add("breed");
                                    if (ourPets[index, Size] == "tbd")
                                        fieldsThatBeganEmpty.Add("size");
                                    if (ourPets[index, Weight] == "tbd")
                                        fieldsThatBeganEmpty.Add("weight");
                                    if (ourPets[index, FurColor] == "tbd")
                                        fieldsThatBeganEmpty.Add("fur");
                                    if (ourPets[index, FurType] == "tbd")
                                        fieldsThatBeganEmpty.Add("coat");
                                    if (ourPets[index, EyeColor] == "tbd")
                                        fieldsThatBeganEmpty.Add("eyes");
                                    if (ourPets[index, Physique] == "tbd")
                                        fieldsThatBeganEmpty.Add("marks");
                                    if (ourPets[index, Behaviors] == "tbd")
                                        fieldsThatBeganEmpty.Add("behaviors");
                                    if (ourPets[index, ActivityLevel] == "tbd")
                                        fieldsThatBeganEmpty.Add("energy");
                                    if (ourPets[index, SociabilityLevel] == "tbd")
                                        fieldsThatBeganEmpty.Add("sociability");
                                    if (ourPets[index, CuriosityScale] == "tbd")
                                        fieldsThatBeganEmpty.Add("curiosity");
                                    if (ourPets[index, AttachmentStyle] == "tbd")
                                        fieldsThatBeganEmpty.Add("attachment");
                                    if (ourPets[index, FeedingStyle] == "tbd")
                                        fieldsThatBeganEmpty.Add("feeding");

                                    string thisSpecies = KeyToWord(ourPets[index, Species]);

                                    // Display current pet info
                                    bool returning = false;
                                    bool allFieldsComplete = false;
                                    bool ageUpdatedThisRun = false;
                                    HashSet<string> completedThisRun = [];
                                    HashSet<string> skippedThisRun = [];

                                AGE_CHECK:
                                    if (ourPets[index, Age] == "?")
                                    {
                                        Console.Clear();

                                        string agePrompt, ageResponse;
                                        agePrompt = ourPets[index, Name] == "tbd"
                                            ? $"This {thisSpecies}'s age is currently unknown. \n\nWould you like to enter one now? (y/n): "
                                            : $"{ourPets[index, Name]}'s age is currently unknown. \n\nWould you like to enter one now? (y/n): ";
                                        ageResponse = PromptYesOrNo(agePrompt);

                                        string promptName = ourPets[index, Name];
                                        if (ageResponse == "y")
                                        {
                                            string thisAge = PromptForAge(thisSpecies, promptName);
                                            ourPets[index, Age] = thisAge;
                                            ageUpdatedThisRun = true;
                                            infoWasModified = true;

                                            string ageUpdatedConfirmation = ourPets[index, Name] == "tbd"
                                                ? $"This {thisSpecies}'s age has been updated."
                                                : $"{ourPets[index, Name]}'s age has been updated.";
                                            PauseWithMessage($"{ageUpdatedConfirmation}");
                                        }
                                    }

                                    while (!allFieldsComplete)
                                    {
                                        List<string> incompleteFields = [];
                                        int stillIncompleteCount = 0;

                                        if (ourPets[index, Name] == "tbd")
                                            incompleteFields.Add("name");
                                        if (ourPets[index, Gender] == "tbd")
                                            incompleteFields.Add("gender");
                                        if (ourPets[index, BreedType] == "tbd")
                                            incompleteFields.Add("breed");
                                        if (ourPets[index, Size] == "tbd")
                                            incompleteFields.Add("size");
                                        if (ourPets[index, Weight] == "tbd")
                                            incompleteFields.Add("weight");
                                        if (ourPets[index, FurColor] == "tbd")
                                            incompleteFields.Add("fur");
                                        if (ourPets[index, FurType] == "tbd")
                                            incompleteFields.Add("coat");
                                        if (ourPets[index, EyeColor] == "tbd")
                                            incompleteFields.Add("eyes");
                                        if (ourPets[index, Physique] == "tbd")
                                            incompleteFields.Add("marks");
                                        if (ourPets[index, Behaviors] == "tbd")
                                            incompleteFields.Add("behaviors");
                                        if (ourPets[index, ActivityLevel] == "tbd")
                                            incompleteFields.Add("energy");
                                        if (ourPets[index, SociabilityLevel] == "tbd")
                                            incompleteFields.Add("sociability");
                                        if (ourPets[index, CuriosityScale] == "tbd")
                                            incompleteFields.Add("curiosity");
                                        if (ourPets[index, AttachmentStyle] == "tbd")
                                            incompleteFields.Add("attachment");
                                        if (ourPets[index, FeedingStyle] == "tbd")
                                            incompleteFields.Add("feeding");

                                        if (incompleteFields.Count == 0)
                                        {
                                            if (ourPets[index, Age] == "?")
                                            {
                                                if (returning)
                                                    PauseWithMessage($"Success: All the required fields for pet-ID {inputID} have now been completed and 'age' is unknown.");
                                                else
                                                    PauseWithMessage($"All the required fields for pet-ID {inputID} were previously completed and 'age' is unknown.");
                                            }
                                            else
                                            {
                                                if (returning)
                                                    PauseWithMessage($"Success: All the required fields for pet-ID {inputID} have now been completed and 'age' is known.");
                                                else
                                                    PauseWithMessage($"All the required fields for pet-ID {inputID} were previously completed and 'age' is known.");
                                            }
                                            goto MENU;
                                        }
                                        else
                                        {
                                            //             Console.Clear();
                                            if (!returning)
                                                if (incompleteFields.Count == 1)
                                                {
                                                    if (ourPets[index, Name] != "tbd")
                                                        PauseWithMessage($"{ourPets[index, Name]} has one required field missing: {incompleteFields[0]}.");
                                                    else
                                                        PauseWithMessage($"Pet-ID {inputID} has one required field missing: {incompleteFields[0]}.");
                                                }
                                                else
                                                {
                                                    if (ourPets[index, Name] != "tbd")
                                                        PauseWithMessage($"{ourPets[index, Name]} has {incompleteFields.Count} required fields missing: {string.Join(", ", incompleteFields)}.");
                                                    else
                                                        PauseWithMessage($"Pet-ID {inputID} has {incompleteFields.Count} required fields missing: {string.Join(", ", incompleteFields)}.");
                                                }

                                            string newValue = "";
                                            foreach (string fieldWasEmptyAtFirst in incompleteFields)
                                            {
                                                string this_species = KeyToWord(ourPets[index, Species]);
                                                string this_name = ourPets[index, Name];

                                                if (fieldWasEmptyAtFirst == "name")
                                                    newValue = PromptForField(BuildPrompt("name", this_species, "tbd"), "name");
                                                else if (fieldWasEmptyAtFirst == "gender")
                                                    newValue = PromptForField(BuildPrompt("gender", this_species, this_name), "gender");
                                                else if (fieldWasEmptyAtFirst == "breed")
                                                    newValue = PromptForField(BuildPrompt("breed", this_species, this_name), "breed");
                                                else if (fieldWasEmptyAtFirst == "size")
                                                    newValue = PromptForField(BuildPrompt("size", this_species, this_name), "size");
                                                else if (fieldWasEmptyAtFirst == "weight")
                                                    newValue = PromptForWeight(this_species, this_name);
                                                else if (fieldWasEmptyAtFirst == "fur")
                                                    newValue = PromptForField(BuildPrompt("fur", this_species, this_name), "fur");
                                                else if (fieldWasEmptyAtFirst == "coat")
                                                    newValue = PromptForField(BuildPrompt("coat", this_species, this_name), "coat");
                                                else if (fieldWasEmptyAtFirst == "eyes")
                                                    newValue = PromptForField(BuildPrompt("eyes", this_species, this_name), "eyes");
                                                else if (fieldWasEmptyAtFirst == "marks")
                                                    newValue = PromptForField(BuildPrompt("marks", this_species, this_name), "marks");
                                                else if (fieldWasEmptyAtFirst == "behaviors")
                                                    newValue = PromptForField(BuildPrompt("behaviors", this_species, this_name), "behaviors");
                                                else if (fieldWasEmptyAtFirst == "energy")
                                                    newValue = PromptForField(BuildPrompt("energy", this_species, this_name), "energy");
                                                else if (fieldWasEmptyAtFirst == "sociability")
                                                    newValue = PromptForField(BuildPrompt("sociability", this_species, this_name), "sociability");
                                                else if (fieldWasEmptyAtFirst == "curiosity")
                                                    newValue = PromptForField(BuildPrompt("curiosity", this_species, this_name), "curiosity");
                                                else if (fieldWasEmptyAtFirst == "attachment")
                                                    newValue = PromptForField(BuildPrompt("attachment", this_species, this_name), "attachment");
                                                else if (fieldWasEmptyAtFirst == "feeding")
                                                    newValue = PromptForField(BuildPrompt("feeding", this_species, this_name), "feeding");

                                                if (HasData(newValue))
                                                {
                                                    switch (fieldWasEmptyAtFirst)
                                                    {
                                                        case "name":
                                                            ourPets[index, Name] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "gender":
                                                            ourPets[index, Gender] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "breed":
                                                            ourPets[index, BreedType] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "size":
                                                            ourPets[index, Size] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "weight":
                                                            ourPets[index, Weight] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "fur":
                                                            ourPets[index, FurColor] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "coat":
                                                            ourPets[index, FurType] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "eyes":
                                                            ourPets[index, EyeColor] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "marks":
                                                            ourPets[index, Physique] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "behaviors":
                                                            ourPets[index, Behaviors] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "energy":
                                                            ourPets[index, ActivityLevel] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "sociability":
                                                            ourPets[index, SociabilityLevel] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "curiosity":
                                                            ourPets[index, CuriosityScale] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "attachment":
                                                            ourPets[index, AttachmentStyle] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                        case "feeding":
                                                            ourPets[index, FeedingStyle] = newValue;
                                                            infoWasModified = true;
                                                            break;
                                                    }

                                                    completedThisRun.Add(fieldWasEmptyAtFirst);
                                                    skippedThisRun.Remove(fieldWasEmptyAtFirst); // optional, if it was previously skipped
                                                }
                                                else   // meaning it's either null, empty or white space
                                                {
                                                    switch (fieldWasEmptyAtFirst)
                                                    {
                                                        case "name":
                                                            ourPets[index, Name] = "tbd";
                                                            break;
                                                        case "gender":
                                                            ourPets[index, Gender] = "tbd";
                                                            break;
                                                        case "breed":
                                                            ourPets[index, BreedType] = "tbd";
                                                            break;
                                                        case "size":
                                                            ourPets[index, Size] = "tbd";
                                                            break;
                                                        case "weight":
                                                            ourPets[index, Weight] = "tbd";
                                                            break;
                                                        case "fur":
                                                            ourPets[index, FurColor] = "tbd";
                                                            break;
                                                        case "coat":
                                                            ourPets[index, FurType] = "tbd";
                                                            break;
                                                        case "eyes":
                                                            ourPets[index, EyeColor] = "tbd";
                                                            break;
                                                        case "marks":
                                                            ourPets[index, Physique] = "tbd";
                                                            break;
                                                        case "behaviors":
                                                            ourPets[index, Behaviors] = "tbd";
                                                            break;
                                                        case "energy":
                                                            ourPets[index, ActivityLevel] = "tbd";
                                                            break;
                                                        case "sociability":
                                                            ourPets[index, SociabilityLevel] = "tbd";
                                                            break;
                                                        case "curiosity":
                                                            ourPets[index, CuriosityScale] = "tbd";
                                                            break;
                                                        case "attachment":
                                                            ourPets[index, AttachmentStyle] = "tbd";
                                                            break;
                                                        case "feeding":
                                                            ourPets[index, FeedingStyle] = "tbd";
                                                            break;
                                                    }

                                                    stillIncompleteCount++;
                                                    skippedThisRun.Add(fieldWasEmptyAtFirst);
                                                }
                                            }

                                            // handle skipped fields or unknown age
                                            if (stillIncompleteCount > 0 || ourPets[index, Age] == "?")
                                            {
                                                Console.Clear();
                                                string retryMessage = stillIncompleteCount > 0
                                                    ? (stillIncompleteCount == 1
                                                        ? $"Pet-ID {inputID}'s '{skippedThisRun.First()}' field still lacks required info. \n\nAre you sure you want to leave it blank? (y/n): "
                                                        : $"Pet-ID {inputID} still has {stillIncompleteCount} fields that lack required info: {string.Join(", ", skippedThisRun)}. \n\nAre you sure you want to leave them blank? (y/n): ")
                                                    : $"All the required fields for pet-ID {inputID} are complete, but 'age' is unknown. \n\nAre you sure you want to leave it blank? (y/n): ";

                                                string retryResponse = PromptYesOrNo(retryMessage);

                                                if (retryResponse == "n")
                                                {
                                                    returning = true;
                                                    allFieldsComplete = false;
                                                    if (ourPets[index, Age] == "?")
                                                        goto AGE_CHECK;
                                                    continue; // if they didn't need age_check it continues checking for  empty fields.
                                                              // age_check is just an extra setp bot it goes to checking after that.
                                                }             // shows intent even if no code below would execute any way
                                                else
                                                {
                                                    // user declined to continue -> final message and exit
                                                    if (ourPets[index, Age] == "?")
                                                    {
                                                        Console.Clear();
                                                        Console.WriteLine($"Validation process for pet-ID {inputID} ended with {stillIncompleteCount} skipped field(s) and 'age' unknown.");
                                                        PrintSummary(fieldsThatBeganEmpty, completedThisRun, skippedThisRun, ageWasUnknownAtStart, ageUpdatedThisRun);
                                                        goto MENU;
                                                    }
                                                    else
                                                    {
                                                        Console.Clear();
                                                        if (!ageUpdatedThisRun)
                                                            Console.WriteLine($"Validation process for pet-ID {inputID} ended with {stillIncompleteCount} skipped field(s) and 'age' was known.");
                                                        else
                                                            Console.WriteLine($"Validation process for pet-ID {inputID} ended with {stillIncompleteCount} skipped field(s) and 'age' was updated.");
                                                        PrintSummary(fieldsThatBeganEmpty, completedThisRun, skippedThisRun, ageWasUnknownAtStart, ageUpdatedThisRun);
                                                        goto MENU;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                // no skipped fields and age was known or updated -> success summary and exit
                                                Console.Clear();
                                                // if (!ageUpdatedThisRun)
                                                //     Console.WriteLine($"Success: pet-ID {inputID} has zero missing fields and 'age' is known.");
                                                // else
                                                //     Console.WriteLine($"Success: pet-ID {inputID} has zero missing fields and 'age' is unknown.");

                                                if (ourPets[index, Age] == "?")
                                                {
                                                    Console.WriteLine($"Success: pet-ID {inputID} has zero missing fields and 'estimated age' is unknown.");
                                                }
                                                else
                                                {
                                                    if (ageWasUnknownAtStart)
                                                        Console.WriteLine($"Success: pet-ID {inputID} has zero missing fields and 'estimated age' was updated.");
                                                    else
                                                        Console.WriteLine($"Success: pet-ID {inputID} has zero missing fields and 'estimated age' was known.");
                                                }

                                                PrintSummary(fieldsThatBeganEmpty, completedThisRun, skippedThisRun, ageWasUnknownAtStart, ageUpdatedThisRun);
                                                goto MENU;
                                            }
                                        }
                                    }
                                }

                                break;
                            }
                        case 4:
                            // Update a pet's record information
                            PauseWithMessage("Challenge Project - please check back soon to see progress.");
                            break;
                        case 5:
                            // Display all of same species that match specified criteria
                            PauseWithMessage("UNDER CONSTRUCTION - please check back next month to see progress.");
                            break;
                    }
                }
                else
                {
                    if (alphabeticAnswers.Contains(menuSelection))
                    {
                        PauseWithMessage($"You entered '{menuSelection}' which is a menu option. However, the program is stupid and only understands whole numbers. Just use the digit and you're good. We apologize for the inconvenience.");
                        continue;
                    }
                    PauseWithMessage("ERROR: A valid menu option wasn't entered. Please try again.");
                }

            } while (menuSelection != "0");

            Console.Clear();
        }

        static void PauseWithMessage(string message)
        {
            Console.Clear();
            Console.WriteLine(message);
            Console.Write("\nPress 'enter' to continue ... ");
            Console.ReadKey();
        }

        static bool HasData(string? value)
        {
            return !string.IsNullOrWhiteSpace(value);
        }

        static void PrintSummary(List<string> initiallyEmpty, HashSet<string> completedRun, HashSet<string> skippedRun, bool ageUnknown, bool ageUpdated)
        {
            string incompleteDisplay = initiallyEmpty.Count > 0
                ? string.Join(", ", initiallyEmpty)
                : "none";

            bool completedAllMissing = initiallyEmpty.All(completedRun.Contains);
            string completedDisplay = completedRun.Count == 0
                ? "none"
                : completedAllMissing ? "all" : string.Join(", ", completedRun);

            bool skippedAllMissing = initiallyEmpty.All(skippedRun.Contains);
            string skippedDisplay = skippedRun.Count == 0
                ? "none"
                : skippedAllMissing ? "all" : string.Join(", ", skippedRun);

            Console.WriteLine("\n         ==== Summary of Validation Run ====");
            Console.WriteLine($"Start of run -> Age: {(ageUnknown ? "unknown" : "known")} | Incomplete: {incompleteDisplay}");

            if (ageUnknown)
            {
                Console.WriteLine($" End of run --> Age: {(ageUpdated ? "updated" : "unknown")} | Completed: {completedDisplay} | Skipped: {skippedDisplay}");
            }
            else
            {
                Console.WriteLine($" End of run --> Completed: {completedDisplay} | Skipped: {skippedDisplay}");
            }

            Console.Write("\nPress 'enter' to continue ... ");
            Console.ReadKey();
        }

        static string PromptYesOrNo(string message)
        {
            string response = "";
            bool validEntry = false;

            while (!validEntry)
            {
                Console.Write(message);
                response = Console.ReadLine()?.Trim().ToLower() ?? "";
                if (response == "y" || response == "n")
                {
                    validEntry = true;
                }
                else if (!HasData(response))
                {
                    PauseWithMessage("ERROR: Nothing entered. Please enter 'y' or 'n'.");
                    Console.Clear();
                }
                else
                {
                    PauseWithMessage("ERROR: Invalid input. Please enter 'y' or 'n'.");
                    Console.Clear();
                }
            }

            return response;
        }

        static void UpdateAllPetsSavedInfo(bool infoModified, int maxEntries, string[,] ourPets)
        {
            if (!infoModified)
            {
                PauseWithMessage("No info was modified so saving isn't needed.");
                return;
            }

            string exportPath = "pets.txt";
            using StreamWriter writer = new(exportPath);

            for (int i = 0; i < maxEntries; i++)
            {
                if (HasData(ourPets[i, 0]))
                {
                    string line = string.Join("|",
                        Enumerable.Range(0, 18).Select(j => ourPets[i, j]));

                    writer.WriteLine(line);
                }
            }
        }

        static void LoadPetsInfoFile(string filePath, string[,] ourPets)
        {
           //  return;  // uncomment to create a new pets.txt file from scratch by entering option 'S' after creating a record or comment to keep working on it after you exit and reboot
            if (!File.Exists(filePath)) return;

            string[] lines = File.ReadAllLines(filePath);
            for (int i = 0; i < lines.Length && i < ourPets.GetLength(0); i++)
            {
                string[] fields = lines[i].Split('|');
                if (fields.Length < 18) continue; // skip malformed lines

                ourPets[i, 0] = fields[0];
                ourPets[i, 1] = fields[1];
                ourPets[i, 2] = fields[2];
                ourPets[i, 3] = fields[3];
                ourPets[i, 4] = fields[4];
                ourPets[i, 5] = fields[5];
                ourPets[i, 6] = fields[6];
                ourPets[i, 7] = fields[7];
                ourPets[i, 8] = fields[8];
                ourPets[i, 9] = fields[9];
                ourPets[i, 10] = fields[10];
                ourPets[i, 11] = fields[11];
                ourPets[i, 12] = fields[12];
                ourPets[i, 13] = fields[13];
                ourPets[i, 14] = fields[14];
                ourPets[i, 15] = fields[15];
                ourPets[i, 16] = fields[16];
                ourPets[i, 17] = fields[17];
            }
        }

        static string PromptForField(string promptMessage, string thisField)
        {
            string result = "";

            HashSet<string> allowedCodes = thisField switch
            {
                "gender" => ["b", "g"],
                "breed" => ["p", "h", "u"],
                "size" => ["s", "m", "l"],
                "fur" => ["bk", "gy", "br", "db", "lb", "rd", "wh", "mx"],
                "coat" => ["sh", "lh", "cy", "dk", "sp", "fy", "hl", "so", "wy", "un"],
                "eyes" => ["am", "co", "bk", "bl", "br", "db", "lb", "go", "gr", "hc", "hz", "un"],
                "behaviors" => ["ex", "fo", "mo", "ad", "qu", "st", "im", "re", "se", "in", "na", "ev", "pr", "bo", "as", "pa", "ob"],
                "energy" => ["1", "2", "3", "4", "5"],
                "sociability" => ["1", "2", "3", "4", "5"],
                "curiosity" => ["1", "2", "3", "4", "5"],
                "attachment" => ["de", "sv", "cf"],
                "feeding" => ["ff", "sf", "pe", "gb", "sn", "un"],
                _ => [],
            };

            bool isValidInput = false;
            bool isFreeform = allowedCodes.Count == 0;
            bool isCoded = false;

            while (!isValidInput)
            {
                Console.Clear();
                Console.Write(promptMessage);
                string? input = Console.ReadLine();
                result = input?.Trim() ?? "";

                if (result.Length > 2 && !isFreeform)
                {
                    var codes = result.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);
                    var invalidCodes = codes.Where(code => !allowedCodes.Contains(code)).ToList();

                    isCoded = codes.All(allowedCodes.Contains);

                    if (invalidCodes.Count > 0)
                    {
                        string message = invalidCodes.Count == 1
                            ? $"ERROR: The code \"{invalidCodes[0]}\" is not recognized. Please try again or leave it blank to skip."
                            : $"ERROR: These codes are not recognized: {string.Join(", ", invalidCodes)}. Please try again or leave it blank to skip.";

                        PauseWithMessage(message);
                    }
                }
                else
                {
                    isCoded = allowedCodes.Contains(result.ToLower());
                }

                if (!HasData(result))
                {
                    isValidInput = true;
                }
                else if (isFreeform || isCoded)
                {
                    isValidInput = true;
                }
                else
                {
                    PauseWithMessage("ERROR: Invalid input. Please try again or leave it blank for now.");
                }
            }

            return result;
        }

        static string PromptForAge(string thisSpecies, string thisName)
        {
            string age = "";
            bool validAge = false;

            while (!validAge)
            {
                Console.Clear();
                if (thisName == "tbd")
                    Console.Write($"Note: Providing an age is optional, but it can help us make better decisions \nin areas such as placement, nutrition, and medical care.\n\nPlease enter this {thisSpecies}'s age (e.g., '2', '5', '11') or '?' if unknown: ");
                else
                    Console.Write($"Note: Providing an age is optional, but it can help us make better decisions \nin areas such as placement, nutrition, and medical care.\n\nPlease enter {thisName}'s age (e.g., '2', '5', '11') or '?' if unknown: ");
                string? result = Console.ReadLine();
                age = result?.Trim() ?? "";

                if (!HasData(age))
                {
                    PauseWithMessage("ERROR: Age cannot be left blank--must be a number or a '?'. Please try again.");
                }
                else if (age == "?")
                    validAge = true;
                else if (int.TryParse(age, out int petAge))
                    if (petAge > 0)
                        validAge = true;
                    else
                        PauseWithMessage("ERROR: Age cannot be zero or negative. Please try again.");
                else
                    PauseWithMessage("ERROR: Invalid input. Please try again.");
            }

            return age;
        }

        static string PromptForWeight(string thisSpecies, string thisName)
        {
            string weightAsString = "";
            bool validWeight = false;

            while (!validWeight)
            {
                Console.Clear();
                if (thisName == "tbd")
                    Console.Write($"Please enter this {thisSpecies}'s weight in pounds (e.g., '13.6', '7.2', '29') or leave blank for now: ");
                else
                    Console.Write($"Please enter {thisName}'s weight in pounds (e.g., '13.6', '7.2', '29') or leave blank for now: ");

                string? result = Console.ReadLine();
                weightAsString = result?.Trim() ?? "";

                if (!HasData(weightAsString))
                {
                    //          weightAsString = "tbd";
                    validWeight = true;
                }
                else if (float.TryParse(weightAsString, out float weight))
                {
                    if (weight > 0)
                        validWeight = true;
                    else
                        PauseWithMessage("ERROR: The number cannot be zero or less. Please try again.");
                }
                else
                {
                    PauseWithMessage("ERROR: A valid number (e.g., 7.7, 0.9, 5) wasn't entered. Please try again.");
                }
            }

            return weightAsString;
        }

        static string BuildPrompt(string field, string species, string name)
        {
            string subject = name == "tbd" ? $"this {species}" : name;

            return field switch
            {
                "name" => $"Enter {subject}'s name or nickname or you may also leave it blank for now and update it later by pressing 'enter': ",
                "gender" => $"Select an option for {subject}'s gender: \n        B = boy | G = girl   \n\nEnter your selection or leave blank for now: ",
                "breed" => $"Select an option for {subject}'s breed type: \n  P = purebred | H = hybrid | U = unknown   \n\nEnter your selection or leave blank for now: ",
                "size" => $"Select an option for {subject}'s size \n  S = small | M = medium | L = large   \n\nEnter your selection or leave blank for now: ",
                "fur" => $"Select an option for {subject}'s fur color: \n BK = black | WH = white | DB = dark-brown | BR = brown | LB = light-brown | GY = gray | RD = red/rust | MX = mixed   \n\nEnter your selection or leave blank for now: ",
                "coat" => $"Select as many options as applicable for {subject}'s fur type: \n SH = short-haired | LH = long-haired | CY = curly | DK = double-coated | SP = spiked | FY = fluffy | NK = hairless | SO = soft | WY = wiry | UN = undefined  \n\nEnter your selections separated by a space or leave blank for now: ",
                "eyes" => $"Select an option for {subject}'s eye color: \n AM = amber | CO = copper | BK = black | DB = dark-brown | BR = brown | LB = light-brown | BL = blue | GR = green | GO = gold | HZ = hazel | HC = heterochromatic | UN = undefined  \n\nEnter your selection or leave blank for now: ",
                "marks" => $"Describe {subject}'s distinguishing features. Enter anything special that would make this pet stand out (e.g., the specific breed or breeds if it's a hybrid, fur color combos, unusual fur colors, unusual eye colors or combos, breed specific markings, scars, missing limbs, or anything else that would help identify them. \n\nYou may also leave it blank or fill it in part and update it later: ",
                "behaviors" => $"Select as many options as applicable for {subject}'s temperament/demeanor:  \n" +
                   "EX = exploratory | FO = focused | MO = motivated | AD = adaptable | QU = quirky | ST = spontaneous | IM = impulsive | RE = reactive | SE = sensitive | IN = interactive | NA = non-aggressive | EV = expressive | PR = protective | BO = bold | AS = assertive | PA = passive | OB = obedient   \n\nEnter your selections separated by a space, or you may leave it blank for now: ",
                "energy" => $"Select an option for {subject}'s activity level:  \n" +
                    "    1 = very mellow (lounges most of the day, minimal movement) \n" +
                    "    2 = calm (generally relaxed, enjoys brief play or strolls) \n" +
                    "    3 = moderate (content with daily walks or short play sessions) \n" +
                    "    4 = energetic (craves regular exercise, playful and interactive) \n" +
                    "    5 = hyperactive (high-energy, impulsive, rarely stays still) \n\n" +
                  "Enter your selection or you may leave it blank for now: ",
                "sociability" => $"Select an option for {subject}'s sociability level:  \n" +
                    "    1 = very reserved (avoids other animals, prefers solitude) \n" +
                    "    2 = reserved (shy but tolerant of brief contact with other pets) \n" +
                    "    3 = neutral (neither avoids nor seeks out interaction with other pets) \n" +
                    "    4 = social (enjoys company of other animals, engages playfully) \n" +
                    "    5 = very social (thrives in group settings, pack-loving, bonds easily) \n\n" +
                  "Enter your selection or you may leave it blank for now: ",
                "curiosity" => $"Select an option for {subject}'s curiosity level:  \n" +
                    "    1 = very cautious (avoids new stimuli, prefers familiar routines) \n" +
                    "    2 = mildly curious (approaches new things slowly, may observe from a distance) \n" +
                    "    3 = neutral (neither seeks nor avoids novelty, reacts situationally) \n" +
                    "    4 = curious (actively investigates new objects, sounds, or environments) \n" +
                    "    5 = highly curious (bold explorer, engages with everything, may get into trouble) \n\n" +
                  "Enter your selection or you may leave it blank for now: ",
                "attachment" => $"Select an option for {subject}'s attachment style: \n       DE = devoted (e.g., dependent, always nearby, emotionally bonded)\n       SV = selective (occasionally affectionate, shows up now and then)\n       CF = carefree (independent, prefers space and solitude)   \n\nEnter your selection or leave blank for now: ",
                "feeding" => $"Select an option for {subject}'s feeding style: \n FF = free-fed | SF = scheduled | PE = picky eater | GB = gobbler | SN = slow nibbler | UN = undefined)   \n\nEnter your selection or leave blank for now: ",
                _ => $"Enter {subject}'s {field} or leave it blank by pressing 'enter': ",
            };
        }
    }
}
